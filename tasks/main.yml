- name: allow node_exporter_user running megacli
  template: src=megacli-prometheus dest=/etc/sudoers.d/megacli-prometheus owner=root group=root mode=0440
  when: node_exporter_collector_megacli

- name: install dependencies
  apt: name={{ item }} update_cache=yes cache_valid_time=86400
  with_items:
      - python-httplib2
  when: "ansible_os_family == 'Debian'"

- name: get list of releases
  uri:
      url: https://api.github.com/repos/prometheus/node_exporter/releases
      return_content: yes
  register: releases
  when: node_exporter_pre_release

- name: get latest release
  uri:
      url: https://api.github.com/repos/prometheus/node_exporter/releases/latest
      return_content: yes
  register: release
  when: not node_exporter_pre_release

- name: set release
  set_fact:
      github_release: "{{ releases.json[0] if node_exporter_pre_release else release.json }}"

- name: get package url
  set_fact:
      node_exporter_json: "{{ (github_release.assets| selectattr('name', 'match', '.*linux-amd64.*')|list)[0] }}"

- name: ensure node_exporter_base_dir is presented
  file: dest={{ item }} state=directory
  with_items:
      - "{{ node_exporter_base_dir }}"

- name: put sudo_megacli.sh for running megacli with sudo
  template: src=sudo_megacli.sh dest={{ node_exporter_base_dir }}/sudo_megacli.sh owner=root group=root mode=755
  when: node_exporter_collector_megacli

- name: add {{ node_exporter_user }}
  user: name={{ node_exporter_user }}

- name: create node_exporter data dir
  file: dest={{ node_exporter_data_dir }} state=directory owner={{ node_exporter_user }} group={{ node_exporter_user }} mode=1777

- name: get {{ node_exporter_base_dir }}/node_exporter stats
  stat: path={{ node_exporter_base_dir }}/node_exporter
  register: stats

- name: backup {{ node_exporter_base_dir }}/node_exporter if it exists and not a symlink
  shell: bash -c "mv {{ node_exporter_base_dir }}/node_exporter {{ node_exporter_base_dir }}/node_exporter_$(date '+%Y_%m_%d_%H_%M_%S')"
  when: stats.stat.exists and not stats.stat.islnk

- name: get node_exporter
  unarchive: src={{ node_exporter_json.browser_download_url }}
             dest={{ node_exporter_base_dir }} copy=no list_files=yes
  register: result

- name: make {{ node_exporter_base_dir }}/node_exporter symlink
  file: state=link src="{{ result.files[0] }}/node_exporter" dest="{{ node_exporter_base_dir }}/node_exporter"
  when: result.changed # noqa 503
  notify: systemd restart node_exporter
